"""
    –ì—Ä–∞ –º–æ—Ä—Å—å–∫–∏–π –±—ñ–π (10–•10). –ö–ª–∞—Å–∏—á–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞ (–≥—Ä–∞–≤–µ—Ü—å/–∫–æ–º–ø'—é—Ç–µ—Ä).

    –í –≥—Ä—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è 6 –∫–ª–∞—Å—ñ–≤ (PartBoard,Cell, Board, Game, Player, Ship)

    –®–ª—è—Ö–æ–º –Ω–∞–¥–∞–Ω–Ω—è –∫–ª—ñ—Ç–∏–Ω–∫–∞–º –ø–æ–ª—è –∫–æ–µ—Ñ—ñ—Ü—ñ–µ–Ω—Ç–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç—ñ (–≤–∞–≥–∏) –≤ –≥—Ä—ñ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –µ–ª–µ–º–µ–Ω—Ç–∏ —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É
    (–∫–æ–º–ø—é—Ç–µ—Ä —Ä–æ–∑—Ä—ñ–∑–Ω—è—î –∫–ª—ñ—Ç–∏–Ω–∫–∏, –¥–µ –∑ –≤–µ–ª–∏–∫–æ—é –≤—ñ—Ä–æ–≥—ñ–¥–Ω—ñ—Å—Ç—é –º–æ–∂—É—Ç—å –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏—Å—å –∫–æ—Ä–∞–±–ª—ñ –≥—Ä–∞–≤—Ü—è).
    –í–∞–≥–∞ –∫–ª—ñ—Ç–∏–Ω–æ–∫ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–æ—Å—Ç—Ä—ñ–ª—É.

    –í –≥—Ä—ñ —î 3 —Å—Ç–∞—Ç—É—Å–∏, —è–∫—ñ –≤–∏–∑–Ω–∞—á–∞—é—Ç—å –ø–æ–¥–∞–ª—å—à–∏–π –Ω–∞–ø—Ä—è–º–æ–∫ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è:
    1)'prepare'
    2)'in game'
    3) "game over"

    –ó–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ –ø–æ–ª—ñ:
    –ø—É—Å—Ç–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∞ (–º–æ—Ä–µ) = 'üü¶'
    –∫–æ—Ä–∞–±–µ–ª—å –≥—Ä–∞–≤—Ü—è       = 'üüß'
    –ø–æ—Ç–æ–ø–ª–µ–Ω–∏–π –∫–æ—Ä–∞–±–µ–ª—å    = 'üü•'
    –ø—ñ–¥–±–∏—Ç–∏–π –∫–æ—Ä–∞–±–µ–ª—å     = 'üü•'
    –Ω–µ–≤–ª—É—á–Ω–∏–π –ø–æ—Å—Ç—Ä—ñ–ª –∞–±–æ —Å—ñ—Ä–∞ –∑–æ–Ω–∞ (—á–∞—Å—Ç–∏–Ω–∞ –ø–æ–ª—è, —â–æ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞) = 'üü©'
"""

import os  # –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó –æ—á–∏—Å—Ç–∫–∏ –µ–∫—Ä–∞–Ω—É
from random import *  # –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä–∞–Ω–¥–æ–º–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç


class PartBoard:
    """
    –û—Å–Ω–æ–≤–Ω–∏–π –∫–ª–∞—Å, —è–∫–∏–π —Ä–æ–∑–¥—ñ–ª—è—î –∫–ª–∞—Å "–ü–æ–ª–µ" –Ω–∞ 3 —á–∞—Å—Ç–∏–Ω–∏:
         –≥—Ä–∞–≤–µ—Ü—å,
         –∫–æ–º–ø—é—Ç–µ—Ä,
         –≤–∞–≥–∞ –∫–ª—ñ—Ç–∏–Ω–æ–∫ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ö–æ–¥—É)


    """
    user = '—á–∞—Å—Ç–∏–Ω–∞ –≥—Ä–∏ –≥—Ä–∞–≤—Ü—è'
    computer = ' —á–∞—Å—Ç–∏–Ω–∞ –≥—Ä–∏ –∫–æ–º–ø—é—Ç–µ—Ä–∞'
    weight = '–∑–Ω–∞—á–∏–º—ñ—Å—Ç—å –∫–ª—ñ—Ç–∏–Ω–∫–∏ –ø–æ–ª—è'


class Board:
    """
    –ö–ª–∞—Å, —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—ç—Ç—å—Å—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ—à–æ–∫ —Ç–∞ –∫–ª—ñ—Ç–∏–Ω–æ–∫"
    """
    def __init__(self, size):
        """
        –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –≤ —è–∫–æ–º—É —â–æ—Ä–∞–∑—É —Ñ–æ—Ä–º—É—é—Ç—å—Å—è –æ—Å–Ω–æ–≤–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —á–∞—Å—Ç–∏–Ω –ø–æ–ª—è

        """
        self.size = size
        self.map_user = [[Cell.empty_cell for _ in range(size)] for _ in range(size)]
        self.map_comp = [[Cell.empty_cell for _ in range(size)] for _ in range(size)]
        self.weight = [[1 for _ in range(size)] for _ in range(size)]

    def get_board_part(self, element):
        """
        –ú–µ—Ç–æ–¥ –∑ –æ–±–æ–≤—è–∑–∫–æ–≤–∏–º –ø—Ä–∞–º–µ—Ç—Ä–æ–º 'element', —è–∫–∏–π –¥–∞—î –∑–º–æ–≥—É –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è
        —ñ–Ω—à–∏—Ö –æ–±—î–∫—Ç—ñ–≤ –¥–æ –æ–¥–Ω—ñ—î—ó –∑ 3 —á–∞—Å—Ç–∏–Ω –ø–æ–ª—è ('—á–∞—Å—Ç–∏–Ω–∞ –≥—Ä–∏ –≥—Ä–∞–≤—Ü—è', —á–∞—Å—Ç–∏–Ω–∞ –≥—Ä–∏ –∫–æ–º–ø—é—Ç–µ—Ä–∞',
        '–∑–Ω–∞—á–∏–º—ñ—Å—Ç—å (–≤–∞–≥–∞) –∫–ª—ñ—Ç–∏–Ω–∫–∏ –ø–æ–ª—è')


        """
        if element == PartBoard.user:
            return self.map_user
        if element == PartBoard.computer:
            return self.map_comp
        if element == PartBoard.weight:
            return self.weight

    def create_board(self, element):
        """
        –ú–µ—Ç–æ–¥, —è–∫–∏–π —Å–≤—Ç–æ—Ä—é—î —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å –≤ —Ç–µ—Ä–º—ñ–Ω–∞–ª –ø–æ–ª—è –≥—Ä–∞–≤—Ü—è —Ç–∞ –∫–æ–º–ø'—é—Ç–µ—Ä–∞ (–æ–∫—Ä–µ–º–æ —â–æ–¥–æ –ø–æ–ª—è —Ç–∞ –≤–∞–≥–∏ –∫–ª—ñ—Ç–∏–Ω–æ–∫)

        """

        field = self.get_board_part(element)
        weights = self.get_max_weight_cells()  # max_weight = 0

        if element == PartBoard.weight:
            for x in range(self.size):
                for y in range(self.size):
                    if (x, y) in weights:
                        print('\033[1;32m', end='')
                    if field[x][y] < self.size:
                        print(" ", end='')
                    if field[x][y] == 0:
                        print(str("" + "."" " + ""), end=' ')
                    else:
                        print(str("" + str(field[x][y]) + " "), end='')
                    print('\033[0;0m', end='')
                print()

        else:
            for x in range(-1, self.size):
                for y in range(-1, self.size):
                    if x == -1 and y == -1:
                        print("  ", end="")
                        continue
                    if x == -1 and y >= 0:
                        print(y + 1, end=" ")
                        continue
                    if x >= 0 and y == -1:
                        print(Game.abc[x], end=' ')
                        continue
                    print("" + str(field[x][y]), end='')
                print("")
        print("")

    def check_position_ship(self, ship, element):
        """
        –ú–µ—Ç–æ–¥ –∑–¥—ñ–π—Å–Ω—é—î –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –º—ñ—Å—Ü—ñ
        (–≤–∏–∫–æ—Ä–∏—Å—Ç–≤–æ—É—î—Ç—å—Å—è –ø—Ä–∏ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—ñ –∫–æ—Ä–∞–±–ª—ñ–≤ —Ç–∞ –≤–∏—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—ñ (–≤–∞–≥–∏) –∫–ª—ñ—Ç–∏–Ω–æ–∫).
        –ü–æ–≤–µ—Ä–∞—Ç—î –±—É–ª–µ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.

        """

        field = self.get_board_part(element)

        if ship.x + ship.height - 1 >= self.size or ship.x < 0 or \
                ship.y + ship.width - 1 >= self.size or ship.y < 0:
            return False

        x = ship.x
        y = ship.y
        width = ship.width  # —à–∏—Ä–∏–Ω–∞ –∫–æ—Ä–±–∞–ª—è (–ø–æ –•)
        height = ship.height  # –≤–∏—Å—Ç–æ—Ç–∞ –∫–æ—Ä–∞–±–ª—è (–ø–æ Y)

        for p_x in range(x, x + height):
            # —Ü–∏–∫–ª –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Å—ñ—Ä—ñ–π –∑–æ–Ω—ñ –∞–±–æ –≤–∂–µ –≤—ñ–¥—Å—Ç—Ä—ñ–ª—è–Ω–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.
            # –Ø–∫—â–æ —Ç–∞–∫ - –ø–æ–≤–µ—Ä—Ç–∞—î  False
            for p_y in range(y, y + width):
                if str(field[p_x][p_y]) == Cell.miss_cell:
                    return False

        for p_x in range(x - 1, x + height + 1):
            # —Ü–∏–∫–ª –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Å—ñ—Ä—ñ–π –∑–æ–Ω—ñ –∞–±–æ –≤–∂–µ –≤—ñ–¥—Å—Ç—Ä—ñ–ª—è–Ω–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.
            # –Ø–∫—â–æ —Ç–∞–∫ - –ø–æ–≤–µ—Ä—Ç–∞—î  False
            for p_y in range(y - 1, y + width + 1):
                if p_x < 0 or p_x >= len(field) or p_y < 0 or p_y >= len(field):
                    continue  # —è–∫—â–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –≤ –º–µ–∂–∞—Ö –ø–æ–ª—è - –ø—Ä–æ–¥–æ–≤–∂—É—î
                if str(field[p_x][p_y]) in (Cell.ship_cell, Cell.destroyed_ship):
                    return False

        return True

    def mark_destroyed_ship(self, ship, element):
        """
        –ú–µ—Ç–æ–¥ –Ω–∞–¥–∞—î –∫–ª—ñ—Ç–∏–Ω–∫–∞–º —Å—Ç–∞—Ç—É—Å "–ø—ñ–¥–±–∏—Ç–≥–æ –∫–æ—Ä–∞–±–ª—è" —Ç–∞ —Å—ñ—Ä–æ—ó –∑–æ–Ω–∏
        """

        field = self.get_board_part(element)

        x, y = ship.x, ship.y
        width, height = ship.width, ship.height

        for p_x in range(x - 1, x + height + 1):
            for p_y in range(y - 1, y + width + 1):
                if p_x < 0 or p_x >= len(field) or p_y < 0 or p_y >= len(field):
                    continue
                field[p_x][p_y] = Cell.miss_cell

        for p_x in range(x, x + height):
            for p_y in range(y, y + width):
                field[p_x][p_y] = Cell.destroyed_ship

    def add_ship_to_board(self, ship, element):
        """
        –ú–µ—Ç–æ–¥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∞–±–ª—è –Ω–∞ –ø–æ–ª–µ (—Ñ–æ—Ä–º—É—î–º –∫–æ–æ—Ä–¥–∏–∞–Ω–∞—Ç–∏ —à–ª—è—Ö–æ–º –ø–µ–µ—Ä–±–∏—Ä–∞–Ω–Ω—è –π–æ–≥–æ –≤–∏—Å–æ—Ç–∏ —Ç–∞ —à–∏—Ä–∏–Ω–∏ —á–µ—Ä–µ–∑ —Ü–∏–∫–ª)
        """

        field = self.get_board_part(element)

        x, y = ship.x, ship.y
        width, height = ship.width, ship.height

        for p_x in range(x, x + height):
            for p_y in range(y, y + width):
                field[p_x][p_y] = ship  # –ø–æ –∫–æ–æ—Ä–¥–Ω–∞—Ç–∞–º –ø–æ–ª—è –¥–æ–¥–∞—î–º–æ –∫–æ—Ä–∞–±–µ–ª—å

    def get_max_weight_cells(self):
        """
        –ú–µ—Ç–æ–¥ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —ñ–∑ —Å–∞–º–∏–º –±—ñ–ª—å—à–∏–º —à–∞–Ω—Å–æ–º –ø–æ–ø–∞–¥–∞–Ω–Ω—è.
         –ü–µ—Ä–µ–±–∏—Ä–∞—î–º–æ —á–µ—Ä–µ–∑ —Ü–∏–∫–ª–∏ –≤—Å—ñ –∫–ª—ñ—Ç–∏–Ω–∏ —Ç–∞ –∑–∞–Ω–æ—Å–∏–º–æ —ó—Ö –¥–æ —Å–ª–æ–≤–Ω–∏–∫–∞ weights = {} –∑ –∫–ª—é—á–µ–º,
         —è–∫–∏–π —î –∑–Ω–∞—á–µ–Ω–Ω—è–º –≤ –∫–ª—ñ—Ç–∏–Ω—Ü—ñ. –ß–µ—Ä–µ–∑ append –¥–æ–¥–∞—î–º–æ (–∑–∞–ø–∞–º—è—Ç–æ–≤—É—î–º–æ) –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è.

        """
        weights = {}  # —Ñ–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫
        max_weight = 0

        for x in range(self.size):
            for y in range(self.size):
                if self.weight[x][y] > max_weight:
                    max_weight = self.weight[x][y]
                weights.setdefault(self.weight[x][y], []).append((x, y))

        return weights[max_weight]

    def recalculate_weight_map(self, available_ships):
        """
        –ú–µ—Ç–æ–¥ –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î –∑–Ω–∞—á–µ–Ω–Ω—è (–≤–∞–≥—É) –∫–ª—ñ—Ç–∏–Ω–æ–∫, –æ—Å–∫—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ö–æ–¥—É —ó—Ö –≤–∞–≥–∞ –∑–º—ñ–Ω—é—î—Ç—å—Å—è.
        –í—Å—ñ–º –∫–ª—ñ—Ç–∏–Ω–∫–∞–º –∑–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥–∞—î—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–Ω—è 1.
        –ü—Ä–æ–±—ñ–≥–∞—î–º–æ –ø–æ –≤—Å—å–æ–º—É –ø–æ–ª—é.
        –Ø–∫—â–æ –∑–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ—Ä–∞–Ω–µ–Ω–∏–π –∫–æ—Ä–∞–±–µ–ª—å - —Å—Ç–∞–≤–∏–º–æ –∫–ª—ñ—Ç–∏–Ω–∞–º –≤–∏—â–µ/–Ω–∏–∂—á–µ/–∑ –±–æ–∫—ñ–≤ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –ø–æ–º–Ω–æ–∂–µ–Ω—ñ –Ω–∞ 50
        (—î –≤–µ–ª–∏–∫–∏–π —à–∞–Ω—Å, —â–æ —Ç–∞–º —î –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—è).
        –ó–∞ –¥—ñ–∞–≥–æ–Ω–∞–ª—è–º–∏ –≤—ñ–¥ –ø–æ—Ä–∞–Ω–µ–Ω–æ—ó –∫–ª—ñ—Ç–∏–Ω–∏ –Ω—ñ—á–æ–≥–æ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ ‚Äì —Ç—É–¥–∏ –≤–ø–∏—Å—É—î–º–æ –Ω—É–ª—ñ.
        –Ø–∫—â–æ –Ω–∞ –∫–∞—Ä—Ç—ñ –∑–Ω–∏—â–µ–Ω–∏–π –∫–æ—Ä–∞–±–µ–ª—å –∞–±–æ –∫–ª—ñ—Ç–∫–∞ –∑ –ø—Ä–æ–º–∞—Ö–æ–º - —Å—Ç–∞–≤–∏–º–æ —Ç—É–¥–∏ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç 0.
        –î–∞–ª—ñ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –∫–ª—ñ—Ç–∏–Ω–∏. –Ø–∫—â–æ –≤ –∫–ª—ñ—Ç–∏–Ω—ñ —î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–æ–º—ñ—Å—Ç–∏—Ç–∏—Å—è –∫–æ—Ä–∞–±–ª—é –¥–æ–¥–∞—î–º–æ —ó–π –∫–æ–µ—Ñ 1.
        """
        self.weight = [[1 for _ in range(self.size)] for _ in range(self.size)]

        for x in range(self.size):
            for y in range(self.size):
                if self.map_comp[x][y] == Cell.damaged_ship:

                    self.weight[x][y] = 0

                    if x - 1 >= 0:
                        if y - 1 >= 0:
                            self.weight[x - 1][y - 1] = 0
                        self.weight[x - 1][y] *= 50
                        if y + 1 < self.size:
                            self.weight[x - 1][y + 1] = 0

                    if y - 1 >= 0:
                        self.weight[x][y - 1] *= 50
                    if y + 1 < self.size:
                        self.weight[x][y + 1] *= 50

                    if x + 1 < self.size:
                        if y - 1 >= 0:
                            self.weight[x + 1][y - 1] = 0
                        self.weight[x + 1][y] *= 50
                        if y + 1 < self.size:
                            self.weight[x + 1][y + 1] = 0

        for ship_size in available_ships:

            ship = Ship(ship_size, 1, 1, 0)
            # –ø–µ—Ä–µ–±–∏—Ä–∞—î–º–æ –∫–ª—ñ—Ç–∏–∫–∏ –ø–æ–ª—è
            for x in range(self.size):
                for y in range(self.size):
                    if self.map_comp[x][y] in (Cell.destroyed_ship, Cell.damaged_ship, Cell.miss_cell) \
                            or self.weight[x][y] == 0:
                        self.weight[x][y] = 0
                        continue
                    # –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤ —è–∫—ñ–π –ø–æ–∑–∏—Ü—ñ—ó –º–æ–∂–µ —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏—Å—å –∫–æ—Ä–∞–±–µ–ª—å
                    for rotation in range(0, 4):
                        ship.set_position(x, y, rotation)
                        if self.check_position_ship(ship, PartBoard.computer):
                            self.weight[x][y] += 1


class Cell:
    """
    –ö–ª–∞—Å –≤ —è–∫–æ–º—É –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—ñ—Ç–∏–Ω–æ–∫ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —ó—Ö —Å—Ç–∞—Ç—É—Å—É (5)
    """
    empty_cell = 'üü¶'
    ship_cell = 'üüß'
    destroyed_ship = 'üü•'
    damaged_ship = 'üü•'
    miss_cell = 'üü©'

class Game:
    abc = ("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")
    ships_rules = [1, 1, 1, 1, 2, 2, 2, 3, 3, 4]
    field_size = len(abc)

    def __init__(self):

        self.players = []
        self.current_player = None
        self.next_player = None

        self.status = 'prepare'

    # –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    def start_game(self):
        """
        –ú–µ—Ç–æ–¥ —Å—Ç–∞—Ä—Ç—É –≥—Ä–∏. –ó –ø–æ—á–∞—Ç–∫—É –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è –ø–æ—Ç–æ—á–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å
        """
        self.current_player = self.players[0]
        self.next_player = self.players[1]

    # —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
    def status_check(self):
        """
        –ú–µ—Ç–æ–¥ –ø–µ—Ä–µ–∫–ª—é—á–∞—î —Å—Ç–∞—Ç—É—Å –≥—Ä–∏. –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ –∑ "prepare" –Ω–∞ "in game" —è–∫—â–æ –¥–æ –≥—Ä–∏ –¥–æ–¥–∞–Ω–≥–æ 2 –≥—Ä–∞–≤—Ü—è.
        –î–∞–ª—ñ —Å—Ç–∞—Ä—Ç—É—î–º–æ –≥—Ä—É

        """
        if self.status == 'prepare' and len(self.players) >= 2:
            self.status = 'in game'
            self.start_game()
            return True
        # –ø–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ –≤ —Å—Ç–∞—Ç—É—Å game over —è–∫—â–æ —É –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è –∑–∞–∏—à–∏–ª–æ—Å—å 0 –∫–æ—Ä–∞–±–ª—ñ–≤
        if self.status == 'in game' and len(self.next_player.ships) == 0:
            self.status = 'game over'
            return True

    def add_player(self, player):
        """
        –ú–µ—Ç–æ–¥, —è–∫–∏–π –¥–æ–±–∞–≤—è–ª—î –≥—Ä–∞–≤—Ü—è —Ç–∞ —Å—Ç–≤–æ—Ä—é—î –ø–æ–ª–µ
        """
        player.field = Board(Game.field_size)
        player.enemy_ships = list(Game.ships_rules)
        # —Ä–æ–∑—Å—Ç–∞–≤–ª—è—î–º–æ –∫–æ—Ä–∞–±–ª—ñ
        self.ships_setup(player)
        #   –≤–∏—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∞–≥—É –¥–ª—è –∫–ª—ñ—Ç–∏–Ω –ø–æ–ª—è
        player.field.recalculate_weight_map(player.enemy_ships)
        self.players.append(player)

    def ships_setup(self, player):
        """

        –ú–µ—Ç–æ–¥ —Ä–æ–±–∏—Ç—å —Ä–æ–∑—Å—Ç–∞–Ω–æ–≤–∫—É –∫–æ—Ä–∞–±–ª—ñ–≤ –∑–∞ –ø—Ä–∞–≤–∏–ª–∞–º–∏, –≤–∏–∑–Ω–∞—á–µ–Ω–∏–º—ñ –≤ –∫–ª–∞—Å—ñ Game
        """

        for ship_size in Game.ships_rules:
            # –∑–∞–¥–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—ñ–≤ (40) –©–æ–± –Ω–µ –ø–æ—Ç—Ä–∞–ø–∏—Ç–∏ –≤ –±–µ—Å–∫—ñ–Ω–µ—á–Ω–∏–π —Ü–∏–∫–ª
            retry_count = 40

            ship = Ship(ship_size, 0, 0, 0)

            while True:

                Game.clear_screen()
                if player.auto_ship_setup is not True:
                    player.field.create_board(PartBoard.user)
                    player.message.append('–ö—É–¥–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ {} –∫–æ—Ä–∞–±–µ–ª—å: '.format(ship_size))
                    for _ in player.message:
                        print(_)
                else:
                    print('...')

                player.message.clear()

                x, y, r = player.get_input('ship_setup')
                # —è–∫—â–æ –≥—Ä–∞–≤–µ—Ü—å –≤–≤—ñ–≤ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ (–∑–∞—á–µ–Ω–Ω—è = 0), —Ç–æ –ø—Ä–æ—Å–∏–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ—Å—Ç–∏
                if x + y + r == 0:
                    continue

                ship.set_position(x, y, r)

                # —è–∫—â–æ –∫–æ—Ä–∞–±–µ–ª—å –º—ñ—Å—Ç–∏—Ç—å—Å—è –Ω–∞ –∑–∞–¥–∞–Ω—ñ–π –ø–æ–∑–∏—Ü—ñ—ó - –¥–æ–¥–∞—î–º–æ –≥—Ä–∞–≤—Ü—é –Ω–∞ –ø–æ–ª–µ –∫–æ—Ä–∞–±–µ–ª—å
                # —Ç–∞–∫–æ–∂ –¥–æ–¥–∞—î–º–æ –∫–æ—Ä–∞–±–µ–ª—å –¥–æ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∞–±–ª—ñ–≤ –≥—Ä–∞–≤—Ü—è —ñ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –¥–ª—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è
                if player.field.check_position_ship(ship, PartBoard.user):
                    player.field.add_ship_to_board(ship, PartBoard.user)
                    player.ships.append(ship)
                    break

                player.message.append('–ù–µ–≤—ñ—Ä–Ω–∞ —Ä–æ–∑—Å—Ç–∞–Ω–æ–≤–∫–∞!')
                retry_count -= 1
                if retry_count < 0:
                    # –ø—ñ—Å–ª—è –∑–∞–¥–∞–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –Ω–µ–≤–¥–∞–ª–∏—Ö —Å–ø—Ä–æ–± - –æ–±–Ω—É–ª—é—î–º–æ –∫–∞—Ä—Ç—É –≥—Ä–∞–≤—Ü—è
                    # –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –∫–æ—Ä–∞–±–ª—ñ —ñ –ø–æ—á–∏–Ω–∞—î–º–æ —Ä–æ–∑—Å—Ç–∞–Ω–æ–≤–∫—É –ø–æ –Ω–æ–≤—ñ–π
                    player.field.map_user = [[Cell.empty_cell for _ in range(Game.field_size)] for _ in
                                             range(Game.field_size)]
                    player.ships = []
                    self.ships_setup(player)
                    return True

    def draw(self):
        if not self.current_player.is_ai:
            self.current_player.field.create_board(PartBoard.user)
            self.current_player.field.create_board(PartBoard.computer)
            # —Ç—É—Ç –º–æ–∂–Ω–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –≤–∞–≥—É –∫–ª—ñ—Ç–∏–Ω–æ–∫:
            # self.current_player.field.create_board(Part_Board.weight)
        for line in self.current_player.message:
            print(line)

    def switch_players(self):
        """
        –ú–µ—Ç–æ–¥ –∑–∞–º—ñ–Ω–∏ –≥—Ä–∞–≤—Ü—ñ–≤
        """
        self.current_player, self.next_player = self.next_player, self.current_player

    @staticmethod
    def clear_screen():
        """
       –ú–µ—Ç–æ–¥ –æ—á–∏—Å—Ç–∫–∏ –µ–∫—Ä–∞–Ω—É (–ø—Ä–∞—Ü—é—î –∑ –≤–∫–ª—é—á–µ–Ω–∏–º "Emulate terminal")
        """

        os.system('cls' if os.name == 'nt' else 'clear')


class Player:

    def __init__(self, name, is_ai, skill, auto_ship):
        self.name = name
        self.is_ai = is_ai
        self.auto_ship_setup = auto_ship
        self.skill = skill
        self.message = []
        self.ships = []
        self.enemy_ships = []
        self.field = None

    def get_input(self, input_type):
        """
        –ú–µ—Ç–æ–¥ –ø—Ä–∏–π–Ω—è—Ç—Ç—è —Ö–æ–¥—É –≥—Ä–∞–≤—Ü—è. –ê–±–æ —Ä–æ–∑—Å—Ç–∞–Ω–æ–∫–∞ –∫–æ—Ä–∞–±–ª—ñ–≤ (input_type == "ship_setup")
        –∞–±–æ –ø–æ—Å—Ç—Ä—ñ–ª (input_type == "shot")
        """

        if input_type == "ship_setup":

            if self.is_ai or self.auto_ship_setup:
                user_input = str(choice(Game.abc)) + str(randrange(0, self.field.size)) + choice(["H", "V"])
            else:
                user_input = input().upper().replace(" ", "")

            if len(user_input) < 3:
                return 0, 0, 0

            x, y, r = user_input[0], user_input[1:-1], user_input[-1]

            if x not in Game.abc or not y.isdigit() or int(y) not in range(1, Game.field_size + 1) or \
                    r not in ("H", "V"):
                self.message.append('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç!')
                return 0, 0, 0

            return Game.abc.index(x), int(y) - 1, 0 if r == 'H' else 1

        if input_type == "shot":

            if self.is_ai:
                if self.skill == 1:
                    x, y = choice(self.field.get_max_weight_cells())
                if self.skill == 0:
                    x, y = randrange(0, self.field.size), randrange(0, self.field.size)
            else:
                user_input = input().upper().replace(" ", "")
                x, y = user_input[0].upper(), user_input[1:]
                if x not in Game.abc or not y.isdigit() or int(y) not in range(1, Game.field_size + 1):
                    self.message.append('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç!')
                    return 500, 0
                x = Game.abc.index(x)
                y = int(y) - 1
            return x, y

    def make_shot(self, target_player):

        sx, sy = self.get_input('shot')

        if sx + sy == 500 or self.field.map_comp[sx][sy] != Cell.empty_cell:
            return 'retry'

        shot_res = target_player.receive_shot((sx, sy))

        if shot_res == 'miss':
            self.field.map_comp[sx][sy] = Cell.miss_cell

        if shot_res == 'get':
            self.field.map_comp[sx][sy] = Cell.damaged_ship

        if type(shot_res) == Ship:
            destroyed_ship = shot_res
            self.field.mark_destroyed_ship(destroyed_ship, PartBoard.computer)
            self.enemy_ships.remove(destroyed_ship.size)
            shot_res = 'kill'

        # –ø—ñ—Å–ª—è –≤–∏—Å—Ç—Ä—ñ–ª—É –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∞–≥–∏ –∫–ª—ñ—Ç–∏–Ω–æ–∫
        self.field.recalculate_weight_map(self.enemy_ships)

        return shot_res

    def receive_shot(self, shot):

        sx, sy = shot

        if type(self.field.map_user[sx][sy]) == Ship:
            ship = self.field.map_user[sx][sy]
            ship.hp -= 1

            if ship.hp <= 0:
                self.field.mark_destroyed_ship(ship, PartBoard.user)
                self.ships.remove(ship)
                return ship

            self.field.map_user[sx][sy] = Cell.damaged_ship
            return 'get'

        else:
            self.field.map_user[sx][sy] = Cell.miss_cell
            return 'miss'


class Ship:

    def __init__(self, size, x, y, rotation):

        self.size = size
        self.hp = size
        self.x = x
        self.y = y
        self.rotation = rotation
        self.set_rotation(rotation)

    def __str__(self):
        return Cell.ship_cell

    def set_position(self, x, y, r):
        self.x = x
        self.y = y
        self.set_rotation(r)

    def set_rotation(self, r):
        self.rotation = r

        if self.rotation == 0:
           self.width = self.size
           self.height = 1
        elif self.rotation == 1:
            self.width = 1
            self.height = self.size
        elif self.rotation == 2:
            self.y = self.y - self.size + 1
            self.width = self.size
            self.height = 1
        elif self.rotation == 3:
            self.x = self.x - self.size + 1
            self.width = 1
            self.height = self.size


if __name__ == '__main__':
    players = []
    players.append(Player(name='–ì—Ä–∞–≤–µ—Ü—å', is_ai=False, auto_ship=True, skill=1))
    players.append(Player(name="–ö–æ–º–ø'—é—Ç–µ—Ä", is_ai=True, auto_ship=True, skill=1))

    game = Game()  # –∑–∞–ø—É—Å–∫ –≥—Ä–∏ + –¥–æ–¥–∞—î–º–æ –±–µ–∑–∫—ñ–Ω–µ—á–Ω–∏–π —Ü–∏–∫ While

    while True:
        game.status_check()  # –∫–æ–∂–µ–Ω –ø–æ—á–∞—Ç–æ–∫ —Ö–æ–¥—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å —ñ –¥–∞–ª—ñ –≤–∂–µ –¥—ñ—î–º–æ –≤–∏—Ö–æ–¥—è—á–∏ –∑—ñ —Å—Ç–∞—Ç—É—Å—É –≥—Ä–∏

        if game.status == 'prepare':
            game.add_player(players.pop(0))  # –¥–æ–¥–∞—î–º–æ –≥—Ä–∞–≤—Ü—è

        if game.status == 'in game':

            Game.clear_screen()  # –æ—á–∏—â–∞—î–º–æ –µ–∫—Ä–∞–Ω —Ç–∞ –¥–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è —Ç–∞ –º–∞–ª—é—î–º–æ –≥—Ä—É
            game.current_player.message.append("–í–≤–µ–¥—ñ—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è –ø–æ—Å—Ç—Ä—ñ–ª—É (–ø—Ä–∏–∫–ª–∞–¥: 'a2'): ")
            game.draw()
            # –æ—á–∏—â–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –≥—Ä–∞–≤—Ü—è
            game.current_player.message.clear()  # —á–µ–∫–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç
            # —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å—Ç—Ä—ñ–ª—É
            shot_result = game.current_player.make_shot(game.next_player)

            if shot_result == 'miss':\

                game.next_player.message.append('{} –ø—Ä–æ–º–∞—Ö–Ω—É–≤—Å—è! '.format(game.current_player.name))
                game.next_player.message.append('–•—ñ–¥: -> {}!'.format(game.next_player.name))
                game.switch_players()
                continue
            elif shot_result == 'retry':
                game.current_player.message.append('–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!')
                continue
            elif shot_result == 'get':
                game.current_player.message.append('–í–ª—É—á–∏–ª–∏!')
                continue
            elif shot_result == 'kill':
                game.current_player.message.append('–ö–æ—Ä–∞–±e–ª—å –∑–Ω–∏—â–µ–Ω–æ!')
                game.next_player.message.append('–ö–æ—Ä–∞–±–µ–ª—å –±—É–≤ –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–Ω–∏—â–µ–Ω–∏–π!')
                continue

        if game.status == 'game over':
            Game.clear_screen()
            game.next_player.field.create_board(PartBoard.user)
            game.current_player.field.create_board(PartBoard.user)
            print('{} –ø–µ—Ä–µ–º—ñ–≥!'.format(game.current_player.name))
            break

    input('')
